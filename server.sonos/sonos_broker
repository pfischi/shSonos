#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ####################################################################
# Imports
# ####################################################################
import json

import os
import argparse
from http.server import BaseHTTPRequestHandler, HTTPServer
import locale
import socketserver
import logging
import logging.handlers
import threading
import configparser
import signal
import time
from soco import discover
from lib_sonos import utils
from lib_sonos import definitions
from lib_sonos.sonos_service import SonosServerService
from lib_sonos import daemon
from lib_sonos import sonos_commands

# ####################################################################
# GLOBALS
# ####################################################################
command_service = None
homedir = os.path.dirname(os.path.realpath(__file__))
logger = logging.getLogger('')

class SonosHttpHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        try:
            global command_service
            result, response = command_service.do_work(self.client_address[0], self.path)
            if result:
                self.send_response(definitions.HTTP_SUCCESS, 'OK')
            else:
                self.send_response(definitions.HTTP_ERROR, 'Bad request')
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write("{}".format(response).encode('utf-8'))
        finally:
            self.connection.close()

    def do_POST(self):
        try:
            size = int(self.headers["Content-length"])
            command = self.rfile.read(size).decode('utf-8')

            try:
                cmd_obj = json.loads(command, cls=sonos_commands.MyDecoder)
            except AttributeError as err:
                err_command = list(filter(None, err.args[0].split("'")))[-1]
                self.make_response(False, "No command '{command}' found!".format(command=err_command))
                return
            status, response = cmd_obj.run()
            self.make_response(status, response)
            logger.debug('Server response -- status: {status} -- response: {response}'.format(status=status,
                                                                                              response=response))

        finally:
            self.connection.close()

    def make_response(self, status, response):
        if status:
            self.send_response(definitions.HTTP_SUCCESS, 'OK')
        else:
            self.send_response(definitions.HTTP_ERROR, 'Bad request')
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write("<html><head><title>Sonos Broker</title></head>".encode('utf-8'))
        self.wfile.write("<body>{response}".format(response=response).encode('utf-8'))
        self.wfile.write("</body></html>".encode('utf-8'))

class ThreadedHTTPServer(socketserver.ThreadingMixIn, HTTPServer):
    """Handle requests in a separate thread."""


class SonosBroker():
    @property
    def loghandler(self):
        return self._loghandler

    @property
    def list_only(self):
        return self._list_only

    @list_only.setter
    def list_only(self, value):
        self._list_only = value

    def __init__(self, debug=False):
        global command_service
        global homedir
        global logger
        self._debug = debug
        self._loghandler = None
        self._http_server = None
        self._host = ''
        self._port = ''
        self._tts_local_mode = False
        self._save_path = None
        self._server_url = None
        self._quota = None
        self._server_ip = None
        self._logfile = None
        self._port = definitions.DEFAULT_PORT
        self._host = definitions.DEFAULT_HOST
        self._sonos_service = None
        self._server_active = True
        self._list_only = False

        # ############################################################
        # Signal Handling
        # ############################################################

        signal.signal(signal.SIGHUP, self.stop)
        signal.signal(signal.SIGINT, self.stop)
        signal.signal(signal.SIGTERM, self.stop)

        config = configparser.ConfigParser()
        config_path = os.path.join(homedir, definitions.DEFAULT_CFG)
        config.read(config_path)

        # ############################################################
        # Logging
        # ############################################################

        if config.has_section('logging'):
            if config.has_option('logging', 'loglevel'):
                loglevel = config.get('logging', 'loglevel')
            else:
                loglevel = 'warning'

            if self._debug:
                loglevel = 'debug'

            if config.has_option('logging', 'logfile'):
                self._logfile = config.get('logging', 'logfile').strip("\"").strip("'")
            else:
                self._logfile = definitions.DEFAULT_LOG

            self._logfile = os.path.expanduser(self._logfile)
            self._logfile = os.path.expandvars(self._logfile)

            if not os.path.isabs(self._logfile):
                self._logfile = os.path.join(homedir, self._logfile)

            try:
                if not os.path.exists(os.path.dirname(self._logfile)):
                    os.makedirs(os.path.dirname(self._logfile))
            except Exception:
                logger.error("Couldn't create logfile path '{path}'. Using default path {'def_path}'!".format(
                    path=os.path.dirname(self._logfile, def_path=definitions.DEFAULT_LOG)))

            numeric_level = getattr(logging, loglevel.upper(), None)

            if not isinstance(numeric_level, int):
                raise ValueError('Invalid log level: %s' % loglevel)

            logdate = "%Y-%m-%d %H:%M:%S"
            logformat = "%(asctime)s %(levelname)-8s %(threadName)-12s %(message)s"

            if numeric_level == logging.DEBUG:
                logdate = None
                logformat = "%(asctime)s %(levelname)-" \
                            "8s %(threadName)-12s %(message)s -- %(filename)s:%(funcName)s:%(lineno)d"

            logging.basicConfig(level=numeric_level, format=logformat, datefmt=logdate)

            #############################################################
            # logfile write test
            #############################################################

            if self._logfile:
                os.umask(0o002)
                try:
                    with open(self._logfile, 'a') as f:
                        f.write("Init sonos broker {version}\n".format(version=definitions.VERSION))
                except IOError as e:
                    print("Error creating logfile {}: {}".format(self._logfile, e))

                try:
                    formatter = logging.Formatter(logformat, logdate)
                    self._loghandler = logging.handlers.TimedRotatingFileHandler(self._logfile, when='midnight',
                                                                                 backupCount=7)
                    self._loghandler.setLevel(numeric_level)
                    self._loghandler.setFormatter(formatter)
                    if numeric_level == logging.DEBUG:  # clean log
                        self._loghandler.doRollover()
                    logger.addHandler(self._loghandler)

                    # set the loglevel for soco framework
                    logging.getLogger('soco.core').addHandler(self._loghandler)
                except IOError as e:
                    print("Error creating logfile {}: {}".format(self._logfile, e))

        if config.has_section('sonos_broker'):
            if config.has_option('sonos_broker', 'server_ip'):
                self._server_ip = config.get('sonos_broker', 'server_ip')

            if config.has_option('sonos_broker', 'host'):
                self._host = config.get('sonos_broker', 'host')

            if config.has_option('sonos_broker', 'port'):
                self._port = config.getint('sonos_broker', 'port')

        if not self._server_ip:
            self._server_ip = utils.get_lan_ip()
            if not self._server_ip:
                raise Exception("Could not detect the internal server ip automatically! Set the ip address "
                                "manually (see config file)")

        if config.has_section('google_tts'):
            if config.has_option('google_tts', 'enabled'):
                self._tts_local_mode = config.getboolean('google_tts', 'enabled')

            if self._tts_local_mode:
                if config.has_option('google_tts', 'save_path'):
                    self._save_path = config.get('google_tts', 'save_path')

                if config.has_option('google_tts', 'server_url'):
                    self._server_url = config.get('google_tts', 'server_url')

                if config.has_option('google_tts', 'quota'):
                    self._quota = config.getint('google_tts', 'quota')

        if self._tts_local_mode and not self._save_path:
            logger.warning('No local save path given!')
            self._tts_local_mode = False

        if self._tts_local_mode and not self._server_url:
            logger.warning('No local server url given!')
            self._tts_local_mode = False

        if self._tts_local_mode and not self._quota:
            self._quota = definitions.DEFAULT_QUOTA

        if self._tts_local_mode:
            if not utils.check_directory_permissions(self._save_path):
                logger.warning('No sufficient folder permissions in \'{}\'!'.format(self._save_path))
                self._tts_local_mode = False
            else:
                free_diskspace = utils.get_free_space_mb(self._save_path)
                logger.info('Free diskspace: {} mb'.format(free_diskspace))

                if free_diskspace < self._quota:
                    logger.warning(
                        'Not enough disk space left on \'{}\'. At least {} mb of free diskspace required!'.format(
                            self._save_path,
                            self._quota))
                    self._tts_local_mode = False

        if not self._tts_local_mode:
            logger.debug("Google-TTS 'local mode' disabled! Only streaming mode available.")
        else:
            logger.debug("Google-TTS 'local mode' enabled!")
            logger.debug('server_url: {}'.format(self._server_url))
            logger.debug('save_path: {}'.format(self._save_path))

    def start(self):
        global command_service
        logger.info("Sonos Broker v{version}".format(version=definitions.VERSION))
        logger.info(
            "Starting server with ip address {ip} ... be sure this is correct.".format(ip=self._server_ip))
        time.sleep(1)
        self._sonos_service = SonosServerService(self._server_ip, self._port, self._server_url, self._save_path,
                                                 self._quota, self._tts_local_mode)
        self._http_server = ThreadedHTTPServer((self._host, self._port), SonosHttpHandler)
        logger.info('Starting http server, use <Ctrl-C> to stop')

        while self._server_active:
            self._http_server.serve_forever()

    def stop(self):
        logger.debug('unsubscribing from sonos speakers ...')
        if self._sonos_service is not None:
            self._sonos_service.unsubscribe_speaker_events()
        if self._http_server:
            self._server_active = False
            logger.debug('closing http server ...')
            self._http_server.socket.close()
        for thread in threading.enumerate():
            try:
                thread.join(2)
            except:
                pass
        if threading.active_count() > 1:
            for thread in threading.enumerate():
                logger.info("Thread: {}, still alive".format(thread.name))
        else:
            logger.info("Sonos Broker stopped")


def kill(pid, wait=10):
    delay = 0.25
    waited = 0
    if pid:
        os.kill(pid, signal.SIGTERM)
        while waited < wait:
            try:
                os.kill(pid, 0)
            except OSError:
                os._exit(0)
            waited += delay
            time.sleep(delay)
        try:
            os.kill(pid, signal.SIGKILL)
        except OSError:
            os._exit(0)


def scan():
    print('Scanning for Sonos speaker in the network ...\n')
    soco_speakers = SonosServerService._discover()
    suffix = ''

    if len(soco_speakers) > 1:
        suffix = "s"

    print("Found {} speaker{} in the network.\n".format(len(soco_speakers), suffix))

    for speaker in soco_speakers:
        try:
            model = SonosServerService.get_model_name(speaker.ip_address)
            print("\n{}".format(speaker.uid))
            print("-" * len(speaker.uid))
            print("\tip   :\t{}".format(speaker.ip_address))
            print("\tname :\t{}".format(speaker.player_name))
            print("\tmodel:\t{}".format(model))
        except ConnectionError:
            print("Speaker '{uid}' seems to be offline.".format(uid=speaker.uid))
            continue

if __name__ == '__main__':
    argparser = argparse.ArgumentParser()
    group = argparser.add_mutually_exclusive_group()

    group.add_argument('-d', '--debug', help='Debug Mode: Broker stays in foreground with verbose output',
                           action='store_true')
    group.add_argument('-s', '--stop', help='Stops the Sonos Broker', action='store_true')
    group.add_argument('-l', '--list', help='Lists all Sonos speaker in the network.', action='store_true')
    args = argparser.parse_args()

    if args.stop:
        print('Shutting down Sonos Broker ...')
        kill(daemon.get_pid(__file__))
    elif args.list:
        scan()
    else:
        broker = SonosBroker(args.debug)

        if locale.getdefaultlocale() == (None, None):
            locale.setlocale(locale.LC_ALL, 'C')
        else:
            locale.setlocale(locale.LC_ALL, '')

        if not args.debug:
            d = daemon.Daemonize(app=__name__, pid=definitions.DEFAULT_PID, action=broker.start,
                                 keep_fds=[broker.loghandler.stream.fileno()])
            d.start()
        else:
            broker.start()