#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ####################################################################
# Imports
# ####################################################################
import os
import argparse
import locale
import logging
import logging.handlers
import configparser
import signal
import time
import pwd
from lib_sonos import utils
from lib_sonos import definitions
from lib_sonos.sonos_service import SonosServerService
import requests

# ####################################################################
# GLOBALS
# ####################################################################

homedir = os.path.dirname(os.path.realpath(__file__))
logger = logging.getLogger('sonos_broker')

class SonosBroker(object):
    @property
    def list_only(self):
        return self._list_only

    @list_only.setter
    def list_only(self, value):
        self._list_only = value

    def __init__(self, debug=False, config=None):
        global homedir
        global logger
        self.stopped = False
        self._debug = debug
        self._loghandler = None
        self._host = ''
        self._port = ''
        self._tts_local_mode = False
        self._save_path = None
        self._server_url = None
        self._quota = None
        self._logfile = None
        self._port = None
        self._host = None
        self._sonos_service = None
        self._server_active = True
        self._list_only = False
        self._config = config
        self._webservice_root_path = None

        # ############################################################
        # Signal Handling
        # ############################################################

        signal.signal(signal.SIGHUP, self.stop)
        signal.signal(signal.SIGINT, self.stop)
        signal.signal(signal.SIGTERM, self.stop)

        config = configparser.ConfigParser()

        if self._config is None:
            config_path = os.path.join(homedir, definitions.DEFAULT_CFG)
        else:
            config_path = self._config

        config.read(config_path)

        # ############################################################
        # Logging
        # ############################################################

        if config.has_section('logging'):
            if config.has_option('logging', 'loglevel'):
                loglevel = config.get('logging', 'loglevel')
            else:
                loglevel = 'warning'

            if self._debug:
                loglevel = 'debug'

            if config.has_option('logging', 'logfile'):
                self._logfile = config.get('logging', 'logfile').strip("\"").strip("'")
            else:
                self._logfile = definitions.DEFAULT_LOG

            self._logfile = os.path.expanduser(self._logfile)
            self._logfile = os.path.expandvars(self._logfile)

            if not os.path.isabs(self._logfile):
                self._logfile = os.path.join(homedir, self._logfile)

            try:
                if not os.path.exists(os.path.dirname(self._logfile)):
                    os.makedirs(os.path.dirname(self._logfile))
            except Exception:
                logger.error("Couldn't create logfile path '{path}'. Using default path '{default_path}'!".format(
                    path=os.path.dirname(self._logfile, default_path=definitions.DEFAULT_LOG)))

            numeric_level = getattr(logging, loglevel.upper(), None)

            if not isinstance(numeric_level, int):
                raise ValueError('Invalid log level: %s' % loglevel)

            logdate = "%Y-%m-%d %H:%M:%S"
            logformat = "%(asctime)s %(levelname)-8s %(threadName)-12s %(message)s"

            if numeric_level == logging.DEBUG:
                logdate = None
                logformat = "%(asctime)s %(levelname)-" \
                            "8s %(threadName)-12s %(message)s -- %(filename)s:%(funcName)s:%(lineno)d"

            logging.basicConfig(level=numeric_level, format=logformat, datefmt=logdate)

            #############################################################
            # logfile write test
            #############################################################

            if self._logfile:
                os.umask(0o002)
                try:
                    with open(self._logfile, 'a') as f:
                        f.write("Init sonos broker {version}\n".format(version=definitions.VERSION))
                except IOError as e:
                    print("Error creating logfile {}: {}".format(self._logfile, e))

                try:
                    formatter = logging.Formatter(logformat, logdate)
                    self._loghandler = logging.handlers.TimedRotatingFileHandler(self._logfile, when='midnight',
                                                                                 backupCount=7, encoding='utf-8')
                    self._loghandler.setLevel(numeric_level)
                    self._loghandler.setFormatter(formatter)
                    if numeric_level == logging.DEBUG:  # clean log
                        self._loghandler.doRollover()
                    logger.addHandler(self._loghandler)

                    # set the loglevel for soco framework
                    logging.getLogger('soco.core').addHandler(self._loghandler)
                except IOError as e:
                    print("Error creating logfile {}: {}".format(self._logfile, e))

        if config.has_section('sonos_broker'):
            self._host = config.get('sonos_broker', 'host', fallback=definitions.DEFAULT_BROKER_LISTENING_IP)
            self._port = config.getint('sonos_broker', 'port', fallback=definitions.DEFAULT_BROKER_PORT)

        if config.has_section('google_tts'):
            if config.has_option('google_tts', 'enabled'):
                self._tts_local_mode = config.getboolean('google_tts', 'enabled')

            if self._tts_local_mode:
                if config.has_option('google_tts', 'save_path'):
                    self._save_path = config.get('google_tts', 'save_path')

                if config.has_option('google_tts', 'server_url'):
                    self._server_url = config.get('google_tts', 'server_url')

                if config.has_option('google_tts', 'quota'):
                    self._quota = config.getint('google_tts', 'quota')

        if self._tts_local_mode and not self._save_path:
            logger.warning('No local save path given!')
            self._tts_local_mode = False

        if self._tts_local_mode and not self._server_url:
            logger.warning('No local server url given!')
            self._tts_local_mode = False

        if self._tts_local_mode and not self._quota:
            self._quota = definitions.DEFAULT_QUOTA

        if self._tts_local_mode:
            if not utils.check_directory_permissions(self._save_path):
                logger.warning('No sufficient folder permissions in \'{}\'!'.format(self._save_path))
                self._tts_local_mode = False
            else:
                free_diskspace = utils.get_free_space_mb(self._save_path)
                logger.info('Free diskspace: {} mb'.format(free_diskspace))

                if free_diskspace < self._quota:
                    logger.warning(
                        'Not enough disk space left on \'{}\'. At least {} mb of free diskspace required!'.format(
                            self._save_path,
                            self._quota))
                    logger.warning("\nIgnore this  warning, if the snippet directoy is a smb or cifs mounted "
                                   "directory.")

        if not self._tts_local_mode:
            logger.debug("Google-TTS disabled!")
        else:
            logger.debug("Google-TTS 'local mode' enabled!")
            logger.debug('server_url: {}'.format(self._server_url))
            logger.debug('save_path: {}'.format(self._save_path))

        # ############################################################
        # Web Service
        # ############################################################

        if config.has_section('webservice'):
            if config.has_option('webservice', 'enabled'):
                if config.getboolean('webservice', 'enabled', fallback=False):
                    # check server root path
                    # exists ?
                    server_root_path = config.get('webservice', 'root_path', fallback='')
                    if server_root_path:
                        logger.debug("Web server root-path set to '{path}'.".format(path=server_root_path))
                        if os.path.exists(server_root_path):
                            # check for permissions
                            if os.access(server_root_path, os.R_OK):
                                logger.debug(
                                    "Web server root path '{path}' permission ok.".format(path=server_root_path))
                                # if all checks passed, then we set the variable
                                self._webservice_root_path = server_root_path
                            else:
                                user_name = pwd.getpwuid(os.getuid()).pw_name
                                logger.error(
                                    "User '{user}' has no read permissions for path '{path}'. Web server functionality "
                                    "disabled.".format(user=user_name, path=server_root_path))
                        else:
                            logger.error("Web server root directory '{path}' not exists. Web server functionality "
                                         "disabled.".format(path=server_root_path))
                    else:
                        logger.error("No server root-path set. Web server functionality disabled.")
                else:
                    logger.debug("Integrated web-server functionality not enabled in config.")

    def start(self):

        signal.signal(signal.SIGHUP, self.stop)
        signal.signal(signal.SIGINT, self.stop)
        signal.signal(signal.SIGTERM, self.stop)

        logger.info("Sonos Broker v{version}".format(version=definitions.VERSION))
        time.sleep(1)
        self._sonos_service = SonosServerService(self._host, self._port, self._server_url, self._save_path,
                                                 self._quota, self._tts_local_mode, self._webservice_root_path)

    def stop(self, *args):
        logger.debug('Shutting down Sonos Broker ...')
        logger.debug('unsubscribing from sonos speakers ...')
        if self._sonos_service is not None:
            self._sonos_service.unsubscribe_speaker_events()
            self._sonos_service.terminate_threads()
        exit()


def scan():
    print('\n\nScanning for Sonos speaker in the network ...')
    soco_speakers = SonosServerService._discover()
    suffix = ''

    if len(soco_speakers) > 1:
        suffix = "s"

    print("Found {} speaker{} in the network.\n".format(len(soco_speakers), suffix))

    for speaker in soco_speakers:
        try:
            info = speaker.get_speaker_info(timeout=5)
            print("\n{}".format(speaker.uid))
            print("-" * len(speaker.uid))
            print("\tip   :\t{}".format(speaker.ip_address))
            print("\tname :\t{}".format(speaker.player_name))
            print("\tmodel:\t{}\n".format(info['model_name']))
        except requests.ConnectionError:
            print("Speaker '{uid}' seems to be offline.".format(uid=speaker.uid))
            continue
        except Exception as ex:
            print('unknown error')
            print(ex)


if __name__ == '__main__':
    argparser = argparse.ArgumentParser()
    subparsers = argparser.add_subparsers(dest="subparser_name")
    start_parser = subparsers.add_parser(name='start', help="Starts the Sonos Broker. ")
    start_parser.add_argument('-d', '--debug', help='Debug Mode: Broker starts with verbose output',
                              action='store_true')
    start_parser.add_argument('-c', '--config', help='[Optional] path to a config file.', dest='config')
    list_parser = subparsers.add_parser(name='list', help="Lists all Sonos speaker in the network.")

    args = argparser.parse_args()

    if args.subparser_name == "list":
        scan()

    elif args.subparser_name == "start":
        config_path = definitions.DEFAULT_CFG
        if args.config:
            config_path = os.path.abspath(args.config)
        if not os.path.exists(config_path):
            print("Config file not found [** {path} **]".format(path=os.path.abspath(config_path)))
            exit()
        SonosBroker(args.debug, config=config_path).start()
    else:
        argparser.print_help()
